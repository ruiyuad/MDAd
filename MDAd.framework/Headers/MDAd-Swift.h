#if 0
#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.1.2 (swiftlang-1100.0.278 clang-1100.0.33.9)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import StoreKit;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MDAd",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif



@class UIViewController;
@class NSCoder;

/// Super view for ads’s views. Remember that never use this view to show and load ads.
SWIFT_CLASS("_TtC4MDAd12RYAdBaseView")
@interface RYAdBaseView : UIView
/// Required reference to a root view controller that is used by the ads view to present content after the
/// user interacts with the ad. The root view controller is most commonly the view controller displaying the ad view.
@property (nonatomic, weak) UIViewController * _Nullable rootViewController;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// A class inherited from NSObject and manages the global settings such as log print.
SWIFT_CLASS("_TtC4MDAd13RYAdMobCenter")
@interface RYAdMobCenter : NSObject
/// Singleton.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RYAdMobCenter * _Nonnull center;)
+ (RYAdMobCenter * _Nonnull)center SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Setups sdk with app key and app secret.
/// \param appKey A string used to identify original app.
///
/// \param appSecretString A string used to identify original app.
///
- (void)setup:(NSString * _Nonnull)appKey appSecret:(NSString * _Nonnull)appSecretString;
/// Enables logs print under <code>Debug</code> mode. Default is false.
/// \param isEnabled A boolean indicates that whether the function of debug print is enabled. True is enabled. otherwise, debug print is disenabled.
///
- (void)enableDebugPrint:(BOOL)isEnabled;
@end

@class SKStoreProductViewController;

@interface RYAdMobCenter (SWIFT_EXTENSION(MDAd)) <SKStoreProductViewControllerDelegate>
- (void)productViewControllerDidFinish:(SKStoreProductViewController * _Nonnull)viewController;
@end

@protocol RYBannerViewDelegate;

/// The view that displays banner ads.
SWIFT_CLASS("_TtC4MDAd12RYBannerView")
@interface RYBannerView : RYAdBaseView
/// Indicates that banner ads id.
@property (nonatomic, copy) NSString * _Nullable adsID;
/// A Boolean value that determines whether the default close button is display. Close button is placed in the upper right corner of superView. Default is true.
@property (nonatomic) BOOL isShowCloseButton;
/// A Boolean value that determines whether the default download button is display. Default is true.
@property (nonatomic) BOOL isShowDownloadButton;
/// Optional delegate object that receives state change notifications from this RYBannerView. Typically this is a UIViewController.
@property (nonatomic, weak) id <RYBannerViewDelegate> _Nullable delegate;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Requests a banner ad.
- (void)loadRequest;
@end



@class RYError;

/// Delegate methods for receiving RYBannerView state change messages such as ad request status and ad click lifecycle.
SWIFT_PROTOCOL("_TtP4MDAd20RYBannerViewDelegate_")
@protocol RYBannerViewDelegate <NSObject>
@optional
/// Tells the delegate that an banner ad request successfully received an ad.
/// \param bannerView The current instance of RYBannerView class.
///
- (void)bannerDidReceiveAd:(RYBannerView * _Nonnull)bannerView;
/// Tells the delegate that an banner ad request failed.
/// \param bannerView The current instance of RYBannerView class.
///
/// \param error An instance of RYError class. You can print <code>error.errorDescription</code> to check error details.
///
- (void)bannerDidFailToReceiveAd:(RYBannerView * _Nonnull)bannerView error:(RYError * _Nonnull)error;
/// Tells the delegate that the user click will open another app, backgrounding the current application.
/// \param bannerView The current instance of RYBannerView class.
///
- (void)bannerWillLeaveApplication:(RYBannerView * _Nonnull)bannerView;
/// Tells the delegate that the user did clicked the close button.
- (void)bannerViewDidClose;
@end

@protocol RYBuoyViewDelegate;

/// The view that displays buoy ads.
SWIFT_CLASS("_TtC4MDAd10RYBuoyView")
@interface RYBuoyView : RYAdBaseView
/// Indicates that buoy ads id.
@property (nonatomic, copy) NSString * _Nullable adsID;
/// A Boolean value that determines whether the default close button is display. Close button is placed in the upper right corner of superView. Default is true.
@property (nonatomic) BOOL isShowCloseButton;
/// Optional delegate object that receives state change notifications from this RYBuoyView. Typically this is a UIViewController.
@property (nonatomic, weak) id <RYBuoyViewDelegate> _Nullable delegate;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Requests a buoy ad.
- (void)loadRequest;
@end




/// Delegate methods for receiving RYBuoyView state change messages such as ad request status and ad click lifecycle.
SWIFT_PROTOCOL("_TtP4MDAd18RYBuoyViewDelegate_")
@protocol RYBuoyViewDelegate <NSObject>
@optional
/// Tells the delegate that an ad request successfully received an ad.
/// \param buoyView The current instance of RYBuoyView class.
///
- (void)buoyDidReceiveAd:(RYBuoyView * _Nonnull)buoyView;
/// Tells the delegate that an ad request failed.
/// \param buoyView The current instance of RYBuoyView class.
///
/// \param error An instance of RYError class. You can print <code>error.errorDescription</code> to check error details.
///
- (void)buoyDidFailToReceiveAd:(RYBuoyView * _Nonnull)buoyView error:(RYError * _Nonnull)error;
/// Tells the delegate that the user click will open another app, backgrounding the current application.
/// \param buoyView The current instance of RYBuoyView class.
///
- (void)buoyWillLeaveApplication:(RYBuoyView * _Nonnull)buoyView;
/// Tell the delegate that the user did clicked the close button.
- (void)buoyViewDidClose;
@end

@protocol RYCustomAdDelegate;

SWIFT_CLASS("_TtC4MDAd10RYCustomAd")
@interface RYCustomAd : NSObject
/// Indicates that ad id needed to be customize. Such as <code>820001</code> for banner ad, <code>850001</code> for info flow ad.
@property (nonatomic, copy) NSString * _Nonnull adsID;
@property (nonatomic, weak) id <RYCustomAdDelegate> _Nullable delegate;
/// Required reference to a root view controller that is used by the ads view to present content after the
/// user interacts with the ad. The root view controller is most commonly the view controller displaying the custom ad view.
@property (nonatomic, weak) UIViewController * _Nullable rootViewController;
- (nonnull instancetype)initWithAdsID:(NSString * _Nonnull)adsID OBJC_DESIGNATED_INITIALIZER;
/// Call this method when the user clicks the ad.
- (void)recordClick;
/// Call this method when the ad is visible to the user.
- (void)recordImpression;
/// Call this method when open the ad’s link.
/// You can add this method to your Selector for gestures or actions that added for custom ad view or its subviews.
- (void)openAdLink;
/// Requests a custom ad. Remembers must set <code>adsID</code> before call this function.
- (void)loadRequest;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Delegate methods for receiving custom ads state change messages such as ad request status.
SWIFT_PROTOCOL("_TtP4MDAd18RYCustomAdDelegate_")
@protocol RYCustomAdDelegate <NSObject>
/// Tells the delegate that an custom ad request successfully.
/// \param customAd An instance of RYCustomAd class.
///
/// \param infos An dictionary and you can custom your specify ad view with it. The infos contains keys are:
/// <ul>
///   <li>
///     “MDAdKeyForImageUrl”: Ad’s image url string. Use this key to retreive image url string. Usage is <code>info[MDAdKeyForImageUrl]</code>.
///   </li>
///   <li>
///     “MDAdKeyForLinkUrl”: Ad’s link url string. Use this key to retreive link url string. Usage is <code>info[MDAdKeyForLinkUrl]</code>.
///   </li>
///   <li>
///     “MDAdKeyForTitle”: Ad’s title. Use this key to retreive title string. Usage is <code>info[MDAdKeyForTitle]</code>.
///   </li>
///   <li>
///     “MDAdKeyForDescription”: Ad’s description text. Use this key to retreive description string. Usage is <code>info[MDAdKeyForDescription]</code>.
///   </li>
/// </ul>
///
- (void)customAdDidReceiveAd:(RYCustomAd * _Nonnull)customAd receivedData:(NSDictionary<NSString *, NSString *> * _Nonnull)infos;
@optional
/// Tells the delegate that an custom ad request failed.
/// \param customAd An instance of RYCustomAd class.
///
/// \param error An instance of RYError class. You can print <code>error.errorDescription</code> to check error details.
///
- (void)customAdDidFailToReceiveAd:(RYCustomAd * _Nonnull)customAd error:(RYError * _Nonnull)error;
@end


SWIFT_CLASS("_TtC4MDAd7RYError")
@interface RYError : NSObject
@property (nonatomic, copy) NSString * _Nullable errorDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol RYInfoFlowViewDelegate;

/// An ad type displayed in the flow of information.
SWIFT_CLASS("_TtC4MDAd14RYInfoFlowView")
@interface RYInfoFlowView : RYAdBaseView
/// Indicates that information flow ads id.
@property (nonatomic, copy) NSString * _Nullable adsID;
/// Optional delegate object that receives state change notifications from this RYInfoFlowView. Typically this is a UIViewController.
@property (nonatomic, weak) id <RYInfoFlowViewDelegate> _Nullable delegate;
/// A Boolean value that determines whether the default close button is display. Close button is placed in the upper right corner of superView. Default is true.
@property (nonatomic) BOOL isShowCloseButton;
/// A Boolean value that determines whether the default download button is display. Default is true.
@property (nonatomic) BOOL isShowDownloadButton;
/// A Boolean value that determines whether the description label is display. Default is false.
/// Remembers that the property works only in the case that the adsID’s value is 850006.
@property (nonatomic) BOOL isShowDescriptionText;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Request an information flow ad.
- (void)loadRequest;
@end




/// Delegate methods for receiving RYInfoFlowView state change messages such as ad request status and ad click lifecycle.
SWIFT_PROTOCOL("_TtP4MDAd22RYInfoFlowViewDelegate_")
@protocol RYInfoFlowViewDelegate <NSObject>
@optional
/// Tells the delegate that an ad request successfully received an ad.
/// \param infoFlowView The current instance of RYInfoFlowView class.
///
- (void)infoFlowDidReceiveAd:(RYInfoFlowView * _Nonnull)infoFlowView;
/// Tells the delegate that an ad request failed.
/// \param infoFlowView The current instance of RYInfoFlowView class.
///
/// \param error An instance of RYError class. You can print <code>error.errorDescription</code> to check error details.
///
- (void)infoFlowDidFailToReceiveAd:(RYInfoFlowView * _Nonnull)infoFlowView error:(RYError * _Nonnull)error;
/// Tells the delegate that the user click will open another app, backgrounding the current application.
/// \param infoFlowView The current instance of RYInfoFlowView class.
///
- (void)infoFlowWillLeaveApplication:(RYInfoFlowView * _Nonnull)infoFlowView;
/// Tells the delegate that the user did clicked the close button.
- (void)infoFlowViewDidClose;
@end

@protocol RYInterstitialHalfViewDelegate;

/// An half interstitial ad.
SWIFT_CLASS("_TtC4MDAd22RYInterstitialHalfView")
@interface RYInterstitialHalfView : RYAdBaseView
/// Indicates that ads id.
@property (nonatomic, copy) NSString * _Nullable adsID;
/// A Boolean value that determines whether the default close button is display. Close button is placed in the upper right corner of superView. Default is true.
@property (nonatomic) BOOL isShowCloseButton;
/// Optional delegate object that receives state change notifications from this RYInterstitialHalfView. Typically this is a UIViewController.
@property (nonatomic, weak) id <RYInterstitialHalfViewDelegate> _Nullable delegate;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Loads request for interstitials.
- (void)loadRequest;
@end




/// Delegate methods for receiving RYInterstitialHalfView state change messages such as ad request status and ad click lifecycle.
SWIFT_PROTOCOL("_TtP4MDAd30RYInterstitialHalfViewDelegate_")
@protocol RYInterstitialHalfViewDelegate <NSObject>
@optional
/// Called when an half interstitial ad request succeeded.
/// \param interstitial The current instance of RYInterstitialHalfView class.
///
- (void)interstitialHalfDidReceiveAd:(RYInterstitialHalfView * _Nonnull)interstitial;
/// Called when an half interstitial ad request completed without an half interstitial to show.
/// \param interstitial The current instance of RYInterstitialHalfView class.
///
/// \param error An instance of RYError class. You can print <code>error.errorDescription</code> to check error details.
///
- (void)interstitialHalfDidFailToReceiveAd:(RYInterstitialHalfView * _Nonnull)interstitial error:(RYError * _Nonnull)error;
/// Tells the delegate that the user click will open another app, backgrounding the current application.
/// \param interstitial The current instance of RYInterstitialHalfView class.
///
- (void)interstitialHalfWillLeaveApplication:(RYInterstitialHalfView * _Nonnull)interstitial;
/// Tell the delegate that the user did clicked the close button.
- (void)interstitialHalfViewDidClose;
@end

@class UIFont;
@class UIColor;
@protocol RYInterstitialViewDelegate;

/// An interstitial ad. This is a full-screen advertisement shown at
/// natural transition points in your application such as between games.
SWIFT_CLASS("_TtC4MDAd18RYInterstitialView")
@interface RYInterstitialView : RYAdBaseView
/// A Boolean value that determines whether count down can cancel when show ads. Default is false.
@property (nonatomic) BOOL needPauseCountDownWhenShowAds;
/// Indicates that ads id.
@property (nonatomic, copy) NSString * _Nullable adsID;
/// Indicates that the logo label font. Only works for interstitial ad which adsID is 810002.
@property (nonatomic, strong) UIFont * _Nullable logoTextFont;
/// Indicates that the logo label text color. Only works for interstitial ad which adsID is 810002.
@property (nonatomic, strong) UIColor * _Nullable logoTextColor;
/// Indicates that the corner radius value of logo image. Only works for interstitial ad which adsID is 810002.
@property (nonatomic) CGFloat logoCornerRadius;
/// Optional delegate object that receives state change notifications from this RYInterstitialView. Typically this is a UIViewController.
@property (nonatomic, weak) id <RYInterstitialViewDelegate> _Nullable delegate;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Loads request for interstitials.
- (void)loadRequest;
@end



@class UIImage;

@interface RYInterstitialView (SWIFT_EXTENSION(MDAd))
/// Configs interstitial ad resources.
/// Only works for interstitial ad which adsID is 810002.
/// \param logoImage The app icon. The ratio of logoImage size is 1:1. We strongly recommand fill it with app icons.
///
/// \param name The app display name description. Default is “MDAd”.
///
- (void)configWithAppLogo:(UIImage * _Nullable)logoImage appName:(NSString * _Nullable)name;
@end


/// Delegate methods for receiving RYInterstitialView state change messages such as ad request status and ad click lifecycle.
SWIFT_PROTOCOL("_TtP4MDAd26RYInterstitialViewDelegate_")
@protocol RYInterstitialViewDelegate <NSObject>
@optional
/// Called when an interstitial ad request succeeded.
/// \param interstitial The current instance of RYInterstitialView class.
///
- (void)interstitialDidReceiveAd:(RYInterstitialView * _Nonnull)interstitial;
/// Called when an interstitial ad request completed without an interstitial to show.
/// \param interstitial The current instance of RYInterstitialView class.
///
/// \param error An instance of RYError class. You can print <code>error.errorDescription</code> to check error details.
///
- (void)interstitialDidFailToReceiveAd:(RYInterstitialView * _Nonnull)interstitial error:(RYError * _Nonnull)error;
/// Tells the delegate that the user click will open another app, backgrounding the current application.
/// \param interstitial The current instance of RYInterstitialView class.
///
- (void)interstitialWillLeaveApplication:(RYInterstitialView * _Nonnull)interstitial;
/// Tell the delegate that the user did clicked the countdown button.
- (void)interstitialCountDownDidTap;
@end

@protocol RYRewardVideoViewControllerDelegate;

/// A view controller to show reward videos.
SWIFT_CLASS("_TtC4MDAd27RYRewardVideoViewController")
@interface RYRewardVideoViewController : UIViewController
/// Optional delegate object that receives state change notifications from this RYRewardVideoViewController. Typically this is a UIViewController.
@property (nonatomic, weak) id <RYRewardVideoViewControllerDelegate> _Nullable delegate;
/// Indicates that reward video ads id.
@property (nonatomic, copy) NSString * _Nullable adsID;
/// A Boolean value that determines whether the default background imageview is display. There will display a background image after award video
/// finishes play if you set the property to true. Default is false.
@property (nonatomic) BOOL needDisplayBackgroundImageView;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewDidLayoutSubviews;
@end






@interface RYRewardVideoViewController (SWIFT_EXTENSION(MDAd))
/// Requests a reward video ad.
- (void)loadRequest;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
@end




/// Delegate methods for receiving reward video state change messages such as ad request status and ad click lifecycle.
SWIFT_PROTOCOL("_TtP4MDAd35RYRewardVideoViewControllerDelegate_")
@protocol RYRewardVideoViewControllerDelegate <NSObject>
@optional
/// Tells the delegate that the reward video ad request successfully received an ad.
/// \param controller An instance of RYRewardVideoViewController class for the current request.
///
- (void)rewardVideoDidReceiveAd:(RYRewardVideoViewController * _Nonnull)controller;
/// Tells the delegate that the reward video ad request failed.
/// \param controller An instance of RYRewardVideoViewController class for the current request.
///
/// \param error An instance of RYError class. You can print <code>error.errorDescription</code> to check error details.
///
- (void)rewardVideoDidFailToReceiveAd:(RYRewardVideoViewController * _Nonnull)controller error:(RYError * _Nonnull)error;
/// Tells the delegate that the user did clicked the close button.
- (void)RewardVideoWillClose;
@end





#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__i386__) && __i386__
// Generated by Apple Swift version 5.1.2 (swiftlang-1100.0.278 clang-1100.0.33.9)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import StoreKit;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MDAd",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif



@class UIViewController;
@class NSCoder;

/// Super view for ads’s views. Remember that never use this view to show and load ads.
SWIFT_CLASS("_TtC4MDAd12RYAdBaseView")
@interface RYAdBaseView : UIView
/// Required reference to a root view controller that is used by the ads view to present content after the
/// user interacts with the ad. The root view controller is most commonly the view controller displaying the ad view.
@property (nonatomic, weak) UIViewController * _Nullable rootViewController;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// A class inherited from NSObject and manages the global settings such as log print.
SWIFT_CLASS("_TtC4MDAd13RYAdMobCenter")
@interface RYAdMobCenter : NSObject
/// Singleton.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RYAdMobCenter * _Nonnull center;)
+ (RYAdMobCenter * _Nonnull)center SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Setups sdk with app key and app secret.
/// \param appKey A string used to identify original app.
///
/// \param appSecretString A string used to identify original app.
///
- (void)setup:(NSString * _Nonnull)appKey appSecret:(NSString * _Nonnull)appSecretString;
/// Enables logs print under <code>Debug</code> mode. Default is false.
/// \param isEnabled A boolean indicates that whether the function of debug print is enabled. True is enabled. otherwise, debug print is disenabled.
///
- (void)enableDebugPrint:(BOOL)isEnabled;
@end

@class SKStoreProductViewController;

@interface RYAdMobCenter (SWIFT_EXTENSION(MDAd)) <SKStoreProductViewControllerDelegate>
- (void)productViewControllerDidFinish:(SKStoreProductViewController * _Nonnull)viewController;
@end

@protocol RYBannerViewDelegate;

/// The view that displays banner ads.
SWIFT_CLASS("_TtC4MDAd12RYBannerView")
@interface RYBannerView : RYAdBaseView
/// Indicates that banner ads id.
@property (nonatomic, copy) NSString * _Nullable adsID;
/// A Boolean value that determines whether the default close button is display. Close button is placed in the upper right corner of superView. Default is true.
@property (nonatomic) BOOL isShowCloseButton;
/// A Boolean value that determines whether the default download button is display. Default is true.
@property (nonatomic) BOOL isShowDownloadButton;
/// Optional delegate object that receives state change notifications from this RYBannerView. Typically this is a UIViewController.
@property (nonatomic, weak) id <RYBannerViewDelegate> _Nullable delegate;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Requests a banner ad.
- (void)loadRequest;
@end



@class RYError;

/// Delegate methods for receiving RYBannerView state change messages such as ad request status and ad click lifecycle.
SWIFT_PROTOCOL("_TtP4MDAd20RYBannerViewDelegate_")
@protocol RYBannerViewDelegate <NSObject>
@optional
/// Tells the delegate that an banner ad request successfully received an ad.
/// \param bannerView The current instance of RYBannerView class.
///
- (void)bannerDidReceiveAd:(RYBannerView * _Nonnull)bannerView;
/// Tells the delegate that an banner ad request failed.
/// \param bannerView The current instance of RYBannerView class.
///
/// \param error An instance of RYError class. You can print <code>error.errorDescription</code> to check error details.
///
- (void)bannerDidFailToReceiveAd:(RYBannerView * _Nonnull)bannerView error:(RYError * _Nonnull)error;
/// Tells the delegate that the user click will open another app, backgrounding the current application.
/// \param bannerView The current instance of RYBannerView class.
///
- (void)bannerWillLeaveApplication:(RYBannerView * _Nonnull)bannerView;
/// Tells the delegate that the user did clicked the close button.
- (void)bannerViewDidClose;
@end

@protocol RYBuoyViewDelegate;

/// The view that displays buoy ads.
SWIFT_CLASS("_TtC4MDAd10RYBuoyView")
@interface RYBuoyView : RYAdBaseView
/// Indicates that buoy ads id.
@property (nonatomic, copy) NSString * _Nullable adsID;
/// A Boolean value that determines whether the default close button is display. Close button is placed in the upper right corner of superView. Default is true.
@property (nonatomic) BOOL isShowCloseButton;
/// Optional delegate object that receives state change notifications from this RYBuoyView. Typically this is a UIViewController.
@property (nonatomic, weak) id <RYBuoyViewDelegate> _Nullable delegate;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Requests a buoy ad.
- (void)loadRequest;
@end




/// Delegate methods for receiving RYBuoyView state change messages such as ad request status and ad click lifecycle.
SWIFT_PROTOCOL("_TtP4MDAd18RYBuoyViewDelegate_")
@protocol RYBuoyViewDelegate <NSObject>
@optional
/// Tells the delegate that an ad request successfully received an ad.
/// \param buoyView The current instance of RYBuoyView class.
///
- (void)buoyDidReceiveAd:(RYBuoyView * _Nonnull)buoyView;
/// Tells the delegate that an ad request failed.
/// \param buoyView The current instance of RYBuoyView class.
///
/// \param error An instance of RYError class. You can print <code>error.errorDescription</code> to check error details.
///
- (void)buoyDidFailToReceiveAd:(RYBuoyView * _Nonnull)buoyView error:(RYError * _Nonnull)error;
/// Tells the delegate that the user click will open another app, backgrounding the current application.
/// \param buoyView The current instance of RYBuoyView class.
///
- (void)buoyWillLeaveApplication:(RYBuoyView * _Nonnull)buoyView;
/// Tell the delegate that the user did clicked the close button.
- (void)buoyViewDidClose;
@end

@protocol RYCustomAdDelegate;

SWIFT_CLASS("_TtC4MDAd10RYCustomAd")
@interface RYCustomAd : NSObject
/// Indicates that ad id needed to be customize. Such as <code>820001</code> for banner ad, <code>850001</code> for info flow ad.
@property (nonatomic, copy) NSString * _Nonnull adsID;
@property (nonatomic, weak) id <RYCustomAdDelegate> _Nullable delegate;
/// Required reference to a root view controller that is used by the ads view to present content after the
/// user interacts with the ad. The root view controller is most commonly the view controller displaying the custom ad view.
@property (nonatomic, weak) UIViewController * _Nullable rootViewController;
- (nonnull instancetype)initWithAdsID:(NSString * _Nonnull)adsID OBJC_DESIGNATED_INITIALIZER;
/// Call this method when the user clicks the ad.
- (void)recordClick;
/// Call this method when the ad is visible to the user.
- (void)recordImpression;
/// Call this method when open the ad’s link.
/// You can add this method to your Selector for gestures or actions that added for custom ad view or its subviews.
- (void)openAdLink;
/// Requests a custom ad. Remembers must set <code>adsID</code> before call this function.
- (void)loadRequest;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Delegate methods for receiving custom ads state change messages such as ad request status.
SWIFT_PROTOCOL("_TtP4MDAd18RYCustomAdDelegate_")
@protocol RYCustomAdDelegate <NSObject>
/// Tells the delegate that an custom ad request successfully.
/// \param customAd An instance of RYCustomAd class.
///
/// \param infos An dictionary and you can custom your specify ad view with it. The infos contains keys are:
/// <ul>
///   <li>
///     “MDAdKeyForImageUrl”: Ad’s image url string. Use this key to retreive image url string. Usage is <code>info[MDAdKeyForImageUrl]</code>.
///   </li>
///   <li>
///     “MDAdKeyForLinkUrl”: Ad’s link url string. Use this key to retreive link url string. Usage is <code>info[MDAdKeyForLinkUrl]</code>.
///   </li>
///   <li>
///     “MDAdKeyForTitle”: Ad’s title. Use this key to retreive title string. Usage is <code>info[MDAdKeyForTitle]</code>.
///   </li>
///   <li>
///     “MDAdKeyForDescription”: Ad’s description text. Use this key to retreive description string. Usage is <code>info[MDAdKeyForDescription]</code>.
///   </li>
/// </ul>
///
- (void)customAdDidReceiveAd:(RYCustomAd * _Nonnull)customAd receivedData:(NSDictionary<NSString *, NSString *> * _Nonnull)infos;
@optional
/// Tells the delegate that an custom ad request failed.
/// \param customAd An instance of RYCustomAd class.
///
/// \param error An instance of RYError class. You can print <code>error.errorDescription</code> to check error details.
///
- (void)customAdDidFailToReceiveAd:(RYCustomAd * _Nonnull)customAd error:(RYError * _Nonnull)error;
@end


SWIFT_CLASS("_TtC4MDAd7RYError")
@interface RYError : NSObject
@property (nonatomic, copy) NSString * _Nullable errorDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol RYInfoFlowViewDelegate;

/// An ad type displayed in the flow of information.
SWIFT_CLASS("_TtC4MDAd14RYInfoFlowView")
@interface RYInfoFlowView : RYAdBaseView
/// Indicates that information flow ads id.
@property (nonatomic, copy) NSString * _Nullable adsID;
/// Optional delegate object that receives state change notifications from this RYInfoFlowView. Typically this is a UIViewController.
@property (nonatomic, weak) id <RYInfoFlowViewDelegate> _Nullable delegate;
/// A Boolean value that determines whether the default close button is display. Close button is placed in the upper right corner of superView. Default is true.
@property (nonatomic) BOOL isShowCloseButton;
/// A Boolean value that determines whether the default download button is display. Default is true.
@property (nonatomic) BOOL isShowDownloadButton;
/// A Boolean value that determines whether the description label is display. Default is false.
/// Remembers that the property works only in the case that the adsID’s value is 850006.
@property (nonatomic) BOOL isShowDescriptionText;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Request an information flow ad.
- (void)loadRequest;
@end




/// Delegate methods for receiving RYInfoFlowView state change messages such as ad request status and ad click lifecycle.
SWIFT_PROTOCOL("_TtP4MDAd22RYInfoFlowViewDelegate_")
@protocol RYInfoFlowViewDelegate <NSObject>
@optional
/// Tells the delegate that an ad request successfully received an ad.
/// \param infoFlowView The current instance of RYInfoFlowView class.
///
- (void)infoFlowDidReceiveAd:(RYInfoFlowView * _Nonnull)infoFlowView;
/// Tells the delegate that an ad request failed.
/// \param infoFlowView The current instance of RYInfoFlowView class.
///
/// \param error An instance of RYError class. You can print <code>error.errorDescription</code> to check error details.
///
- (void)infoFlowDidFailToReceiveAd:(RYInfoFlowView * _Nonnull)infoFlowView error:(RYError * _Nonnull)error;
/// Tells the delegate that the user click will open another app, backgrounding the current application.
/// \param infoFlowView The current instance of RYInfoFlowView class.
///
- (void)infoFlowWillLeaveApplication:(RYInfoFlowView * _Nonnull)infoFlowView;
/// Tells the delegate that the user did clicked the close button.
- (void)infoFlowViewDidClose;
@end

@protocol RYInterstitialHalfViewDelegate;

/// An half interstitial ad.
SWIFT_CLASS("_TtC4MDAd22RYInterstitialHalfView")
@interface RYInterstitialHalfView : RYAdBaseView
/// Indicates that ads id.
@property (nonatomic, copy) NSString * _Nullable adsID;
/// A Boolean value that determines whether the default close button is display. Close button is placed in the upper right corner of superView. Default is true.
@property (nonatomic) BOOL isShowCloseButton;
/// Optional delegate object that receives state change notifications from this RYInterstitialHalfView. Typically this is a UIViewController.
@property (nonatomic, weak) id <RYInterstitialHalfViewDelegate> _Nullable delegate;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Loads request for interstitials.
- (void)loadRequest;
@end




/// Delegate methods for receiving RYInterstitialHalfView state change messages such as ad request status and ad click lifecycle.
SWIFT_PROTOCOL("_TtP4MDAd30RYInterstitialHalfViewDelegate_")
@protocol RYInterstitialHalfViewDelegate <NSObject>
@optional
/// Called when an half interstitial ad request succeeded.
/// \param interstitial The current instance of RYInterstitialHalfView class.
///
- (void)interstitialHalfDidReceiveAd:(RYInterstitialHalfView * _Nonnull)interstitial;
/// Called when an half interstitial ad request completed without an half interstitial to show.
/// \param interstitial The current instance of RYInterstitialHalfView class.
///
/// \param error An instance of RYError class. You can print <code>error.errorDescription</code> to check error details.
///
- (void)interstitialHalfDidFailToReceiveAd:(RYInterstitialHalfView * _Nonnull)interstitial error:(RYError * _Nonnull)error;
/// Tells the delegate that the user click will open another app, backgrounding the current application.
/// \param interstitial The current instance of RYInterstitialHalfView class.
///
- (void)interstitialHalfWillLeaveApplication:(RYInterstitialHalfView * _Nonnull)interstitial;
/// Tell the delegate that the user did clicked the close button.
- (void)interstitialHalfViewDidClose;
@end

@class UIFont;
@class UIColor;
@protocol RYInterstitialViewDelegate;

/// An interstitial ad. This is a full-screen advertisement shown at
/// natural transition points in your application such as between games.
SWIFT_CLASS("_TtC4MDAd18RYInterstitialView")
@interface RYInterstitialView : RYAdBaseView
/// A Boolean value that determines whether count down can cancel when show ads. Default is false.
@property (nonatomic) BOOL needPauseCountDownWhenShowAds;
/// Indicates that ads id.
@property (nonatomic, copy) NSString * _Nullable adsID;
/// Indicates that the logo label font. Only works for interstitial ad which adsID is 810002.
@property (nonatomic, strong) UIFont * _Nullable logoTextFont;
/// Indicates that the logo label text color. Only works for interstitial ad which adsID is 810002.
@property (nonatomic, strong) UIColor * _Nullable logoTextColor;
/// Indicates that the corner radius value of logo image. Only works for interstitial ad which adsID is 810002.
@property (nonatomic) CGFloat logoCornerRadius;
/// Optional delegate object that receives state change notifications from this RYInterstitialView. Typically this is a UIViewController.
@property (nonatomic, weak) id <RYInterstitialViewDelegate> _Nullable delegate;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Loads request for interstitials.
- (void)loadRequest;
@end



@class UIImage;

@interface RYInterstitialView (SWIFT_EXTENSION(MDAd))
/// Configs interstitial ad resources.
/// Only works for interstitial ad which adsID is 810002.
/// \param logoImage The app icon. The ratio of logoImage size is 1:1. We strongly recommand fill it with app icons.
///
/// \param name The app display name description. Default is “MDAd”.
///
- (void)configWithAppLogo:(UIImage * _Nullable)logoImage appName:(NSString * _Nullable)name;
@end


/// Delegate methods for receiving RYInterstitialView state change messages such as ad request status and ad click lifecycle.
SWIFT_PROTOCOL("_TtP4MDAd26RYInterstitialViewDelegate_")
@protocol RYInterstitialViewDelegate <NSObject>
@optional
/// Called when an interstitial ad request succeeded.
/// \param interstitial The current instance of RYInterstitialView class.
///
- (void)interstitialDidReceiveAd:(RYInterstitialView * _Nonnull)interstitial;
/// Called when an interstitial ad request completed without an interstitial to show.
/// \param interstitial The current instance of RYInterstitialView class.
///
/// \param error An instance of RYError class. You can print <code>error.errorDescription</code> to check error details.
///
- (void)interstitialDidFailToReceiveAd:(RYInterstitialView * _Nonnull)interstitial error:(RYError * _Nonnull)error;
/// Tells the delegate that the user click will open another app, backgrounding the current application.
/// \param interstitial The current instance of RYInterstitialView class.
///
- (void)interstitialWillLeaveApplication:(RYInterstitialView * _Nonnull)interstitial;
/// Tell the delegate that the user did clicked the countdown button.
- (void)interstitialCountDownDidTap;
@end

@protocol RYRewardVideoViewControllerDelegate;

/// A view controller to show reward videos.
SWIFT_CLASS("_TtC4MDAd27RYRewardVideoViewController")
@interface RYRewardVideoViewController : UIViewController
/// Optional delegate object that receives state change notifications from this RYRewardVideoViewController. Typically this is a UIViewController.
@property (nonatomic, weak) id <RYRewardVideoViewControllerDelegate> _Nullable delegate;
/// Indicates that reward video ads id.
@property (nonatomic, copy) NSString * _Nullable adsID;
/// A Boolean value that determines whether the default background imageview is display. There will display a background image after award video
/// finishes play if you set the property to true. Default is false.
@property (nonatomic) BOOL needDisplayBackgroundImageView;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewDidLayoutSubviews;
@end






@interface RYRewardVideoViewController (SWIFT_EXTENSION(MDAd))
/// Requests a reward video ad.
- (void)loadRequest;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
@end




/// Delegate methods for receiving reward video state change messages such as ad request status and ad click lifecycle.
SWIFT_PROTOCOL("_TtP4MDAd35RYRewardVideoViewControllerDelegate_")
@protocol RYRewardVideoViewControllerDelegate <NSObject>
@optional
/// Tells the delegate that the reward video ad request successfully received an ad.
/// \param controller An instance of RYRewardVideoViewController class for the current request.
///
- (void)rewardVideoDidReceiveAd:(RYRewardVideoViewController * _Nonnull)controller;
/// Tells the delegate that the reward video ad request failed.
/// \param controller An instance of RYRewardVideoViewController class for the current request.
///
/// \param error An instance of RYError class. You can print <code>error.errorDescription</code> to check error details.
///
- (void)rewardVideoDidFailToReceiveAd:(RYRewardVideoViewController * _Nonnull)controller error:(RYError * _Nonnull)error;
/// Tells the delegate that the user did clicked the close button.
- (void)RewardVideoWillClose;
@end





#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif
#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.1.2 (swiftlang-1100.0.278 clang-1100.0.33.9)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import StoreKit;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MDAd",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif



@class UIViewController;
@class NSCoder;

/// Super view for ads’s views. Remember that never use this view to show and load ads.
SWIFT_CLASS("_TtC4MDAd12RYAdBaseView")
@interface RYAdBaseView : UIView
/// Required reference to a root view controller that is used by the ads view to present content after the
/// user interacts with the ad. The root view controller is most commonly the view controller displaying the ad view.
@property (nonatomic, weak) UIViewController * _Nullable rootViewController;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// A class inherited from NSObject and manages the global settings such as log print.
SWIFT_CLASS("_TtC4MDAd13RYAdMobCenter")
@interface RYAdMobCenter : NSObject
/// Singleton.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RYAdMobCenter * _Nonnull center;)
+ (RYAdMobCenter * _Nonnull)center SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Setups sdk with app key and app secret.
/// \param appKey A string used to identify original app.
///
/// \param appSecretString A string used to identify original app.
///
- (void)setup:(NSString * _Nonnull)appKey appSecret:(NSString * _Nonnull)appSecretString;
/// Enables logs print under <code>Debug</code> mode. Default is false.
/// \param isEnabled A boolean indicates that whether the function of debug print is enabled. True is enabled. otherwise, debug print is disenabled.
///
- (void)enableDebugPrint:(BOOL)isEnabled;
@end

@class SKStoreProductViewController;

@interface RYAdMobCenter (SWIFT_EXTENSION(MDAd)) <SKStoreProductViewControllerDelegate>
- (void)productViewControllerDidFinish:(SKStoreProductViewController * _Nonnull)viewController;
@end

@protocol RYBannerViewDelegate;

/// The view that displays banner ads.
SWIFT_CLASS("_TtC4MDAd12RYBannerView")
@interface RYBannerView : RYAdBaseView
/// Indicates that banner ads id.
@property (nonatomic, copy) NSString * _Nullable adsID;
/// A Boolean value that determines whether the default close button is display. Close button is placed in the upper right corner of superView. Default is true.
@property (nonatomic) BOOL isShowCloseButton;
/// A Boolean value that determines whether the default download button is display. Default is true.
@property (nonatomic) BOOL isShowDownloadButton;
/// Optional delegate object that receives state change notifications from this RYBannerView. Typically this is a UIViewController.
@property (nonatomic, weak) id <RYBannerViewDelegate> _Nullable delegate;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Requests a banner ad.
- (void)loadRequest;
@end



@class RYError;

/// Delegate methods for receiving RYBannerView state change messages such as ad request status and ad click lifecycle.
SWIFT_PROTOCOL("_TtP4MDAd20RYBannerViewDelegate_")
@protocol RYBannerViewDelegate <NSObject>
@optional
/// Tells the delegate that an banner ad request successfully received an ad.
/// \param bannerView The current instance of RYBannerView class.
///
- (void)bannerDidReceiveAd:(RYBannerView * _Nonnull)bannerView;
/// Tells the delegate that an banner ad request failed.
/// \param bannerView The current instance of RYBannerView class.
///
/// \param error An instance of RYError class. You can print <code>error.errorDescription</code> to check error details.
///
- (void)bannerDidFailToReceiveAd:(RYBannerView * _Nonnull)bannerView error:(RYError * _Nonnull)error;
/// Tells the delegate that the user click will open another app, backgrounding the current application.
/// \param bannerView The current instance of RYBannerView class.
///
- (void)bannerWillLeaveApplication:(RYBannerView * _Nonnull)bannerView;
/// Tells the delegate that the user did clicked the close button.
- (void)bannerViewDidClose;
@end

@protocol RYBuoyViewDelegate;

/// The view that displays buoy ads.
SWIFT_CLASS("_TtC4MDAd10RYBuoyView")
@interface RYBuoyView : RYAdBaseView
/// Indicates that buoy ads id.
@property (nonatomic, copy) NSString * _Nullable adsID;
/// A Boolean value that determines whether the default close button is display. Close button is placed in the upper right corner of superView. Default is true.
@property (nonatomic) BOOL isShowCloseButton;
/// Optional delegate object that receives state change notifications from this RYBuoyView. Typically this is a UIViewController.
@property (nonatomic, weak) id <RYBuoyViewDelegate> _Nullable delegate;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Requests a buoy ad.
- (void)loadRequest;
@end




/// Delegate methods for receiving RYBuoyView state change messages such as ad request status and ad click lifecycle.
SWIFT_PROTOCOL("_TtP4MDAd18RYBuoyViewDelegate_")
@protocol RYBuoyViewDelegate <NSObject>
@optional
/// Tells the delegate that an ad request successfully received an ad.
/// \param buoyView The current instance of RYBuoyView class.
///
- (void)buoyDidReceiveAd:(RYBuoyView * _Nonnull)buoyView;
/// Tells the delegate that an ad request failed.
/// \param buoyView The current instance of RYBuoyView class.
///
/// \param error An instance of RYError class. You can print <code>error.errorDescription</code> to check error details.
///
- (void)buoyDidFailToReceiveAd:(RYBuoyView * _Nonnull)buoyView error:(RYError * _Nonnull)error;
/// Tells the delegate that the user click will open another app, backgrounding the current application.
/// \param buoyView The current instance of RYBuoyView class.
///
- (void)buoyWillLeaveApplication:(RYBuoyView * _Nonnull)buoyView;
/// Tell the delegate that the user did clicked the close button.
- (void)buoyViewDidClose;
@end

@protocol RYCustomAdDelegate;

SWIFT_CLASS("_TtC4MDAd10RYCustomAd")
@interface RYCustomAd : NSObject
/// Indicates that ad id needed to be customize. Such as <code>820001</code> for banner ad, <code>850001</code> for info flow ad.
@property (nonatomic, copy) NSString * _Nonnull adsID;
@property (nonatomic, weak) id <RYCustomAdDelegate> _Nullable delegate;
/// Required reference to a root view controller that is used by the ads view to present content after the
/// user interacts with the ad. The root view controller is most commonly the view controller displaying the custom ad view.
@property (nonatomic, weak) UIViewController * _Nullable rootViewController;
- (nonnull instancetype)initWithAdsID:(NSString * _Nonnull)adsID OBJC_DESIGNATED_INITIALIZER;
/// Call this method when the user clicks the ad.
- (void)recordClick;
/// Call this method when the ad is visible to the user.
- (void)recordImpression;
/// Call this method when open the ad’s link.
/// You can add this method to your Selector for gestures or actions that added for custom ad view or its subviews.
- (void)openAdLink;
/// Requests a custom ad. Remembers must set <code>adsID</code> before call this function.
- (void)loadRequest;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Delegate methods for receiving custom ads state change messages such as ad request status.
SWIFT_PROTOCOL("_TtP4MDAd18RYCustomAdDelegate_")
@protocol RYCustomAdDelegate <NSObject>
/// Tells the delegate that an custom ad request successfully.
/// \param customAd An instance of RYCustomAd class.
///
/// \param infos An dictionary and you can custom your specify ad view with it. The infos contains keys are:
/// <ul>
///   <li>
///     “MDAdKeyForImageUrl”: Ad’s image url string. Use this key to retreive image url string. Usage is <code>info[MDAdKeyForImageUrl]</code>.
///   </li>
///   <li>
///     “MDAdKeyForLinkUrl”: Ad’s link url string. Use this key to retreive link url string. Usage is <code>info[MDAdKeyForLinkUrl]</code>.
///   </li>
///   <li>
///     “MDAdKeyForTitle”: Ad’s title. Use this key to retreive title string. Usage is <code>info[MDAdKeyForTitle]</code>.
///   </li>
///   <li>
///     “MDAdKeyForDescription”: Ad’s description text. Use this key to retreive description string. Usage is <code>info[MDAdKeyForDescription]</code>.
///   </li>
/// </ul>
///
- (void)customAdDidReceiveAd:(RYCustomAd * _Nonnull)customAd receivedData:(NSDictionary<NSString *, NSString *> * _Nonnull)infos;
@optional
/// Tells the delegate that an custom ad request failed.
/// \param customAd An instance of RYCustomAd class.
///
/// \param error An instance of RYError class. You can print <code>error.errorDescription</code> to check error details.
///
- (void)customAdDidFailToReceiveAd:(RYCustomAd * _Nonnull)customAd error:(RYError * _Nonnull)error;
@end


SWIFT_CLASS("_TtC4MDAd7RYError")
@interface RYError : NSObject
@property (nonatomic, copy) NSString * _Nullable errorDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol RYInfoFlowViewDelegate;

/// An ad type displayed in the flow of information.
SWIFT_CLASS("_TtC4MDAd14RYInfoFlowView")
@interface RYInfoFlowView : RYAdBaseView
/// Indicates that information flow ads id.
@property (nonatomic, copy) NSString * _Nullable adsID;
/// Optional delegate object that receives state change notifications from this RYInfoFlowView. Typically this is a UIViewController.
@property (nonatomic, weak) id <RYInfoFlowViewDelegate> _Nullable delegate;
/// A Boolean value that determines whether the default close button is display. Close button is placed in the upper right corner of superView. Default is true.
@property (nonatomic) BOOL isShowCloseButton;
/// A Boolean value that determines whether the default download button is display. Default is true.
@property (nonatomic) BOOL isShowDownloadButton;
/// A Boolean value that determines whether the description label is display. Default is false.
/// Remembers that the property works only in the case that the adsID’s value is 850006.
@property (nonatomic) BOOL isShowDescriptionText;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Request an information flow ad.
- (void)loadRequest;
@end




/// Delegate methods for receiving RYInfoFlowView state change messages such as ad request status and ad click lifecycle.
SWIFT_PROTOCOL("_TtP4MDAd22RYInfoFlowViewDelegate_")
@protocol RYInfoFlowViewDelegate <NSObject>
@optional
/// Tells the delegate that an ad request successfully received an ad.
/// \param infoFlowView The current instance of RYInfoFlowView class.
///
- (void)infoFlowDidReceiveAd:(RYInfoFlowView * _Nonnull)infoFlowView;
/// Tells the delegate that an ad request failed.
/// \param infoFlowView The current instance of RYInfoFlowView class.
///
/// \param error An instance of RYError class. You can print <code>error.errorDescription</code> to check error details.
///
- (void)infoFlowDidFailToReceiveAd:(RYInfoFlowView * _Nonnull)infoFlowView error:(RYError * _Nonnull)error;
/// Tells the delegate that the user click will open another app, backgrounding the current application.
/// \param infoFlowView The current instance of RYInfoFlowView class.
///
- (void)infoFlowWillLeaveApplication:(RYInfoFlowView * _Nonnull)infoFlowView;
/// Tells the delegate that the user did clicked the close button.
- (void)infoFlowViewDidClose;
@end

@protocol RYInterstitialHalfViewDelegate;

/// An half interstitial ad.
SWIFT_CLASS("_TtC4MDAd22RYInterstitialHalfView")
@interface RYInterstitialHalfView : RYAdBaseView
/// Indicates that ads id.
@property (nonatomic, copy) NSString * _Nullable adsID;
/// A Boolean value that determines whether the default close button is display. Close button is placed in the upper right corner of superView. Default is true.
@property (nonatomic) BOOL isShowCloseButton;
/// Optional delegate object that receives state change notifications from this RYInterstitialHalfView. Typically this is a UIViewController.
@property (nonatomic, weak) id <RYInterstitialHalfViewDelegate> _Nullable delegate;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Loads request for interstitials.
- (void)loadRequest;
@end




/// Delegate methods for receiving RYInterstitialHalfView state change messages such as ad request status and ad click lifecycle.
SWIFT_PROTOCOL("_TtP4MDAd30RYInterstitialHalfViewDelegate_")
@protocol RYInterstitialHalfViewDelegate <NSObject>
@optional
/// Called when an half interstitial ad request succeeded.
/// \param interstitial The current instance of RYInterstitialHalfView class.
///
- (void)interstitialHalfDidReceiveAd:(RYInterstitialHalfView * _Nonnull)interstitial;
/// Called when an half interstitial ad request completed without an half interstitial to show.
/// \param interstitial The current instance of RYInterstitialHalfView class.
///
/// \param error An instance of RYError class. You can print <code>error.errorDescription</code> to check error details.
///
- (void)interstitialHalfDidFailToReceiveAd:(RYInterstitialHalfView * _Nonnull)interstitial error:(RYError * _Nonnull)error;
/// Tells the delegate that the user click will open another app, backgrounding the current application.
/// \param interstitial The current instance of RYInterstitialHalfView class.
///
- (void)interstitialHalfWillLeaveApplication:(RYInterstitialHalfView * _Nonnull)interstitial;
/// Tell the delegate that the user did clicked the close button.
- (void)interstitialHalfViewDidClose;
@end

@class UIFont;
@class UIColor;
@protocol RYInterstitialViewDelegate;

/// An interstitial ad. This is a full-screen advertisement shown at
/// natural transition points in your application such as between games.
SWIFT_CLASS("_TtC4MDAd18RYInterstitialView")
@interface RYInterstitialView : RYAdBaseView
/// A Boolean value that determines whether count down can cancel when show ads. Default is false.
@property (nonatomic) BOOL needPauseCountDownWhenShowAds;
/// Indicates that ads id.
@property (nonatomic, copy) NSString * _Nullable adsID;
/// Indicates that the logo label font. Only works for interstitial ad which adsID is 810002.
@property (nonatomic, strong) UIFont * _Nullable logoTextFont;
/// Indicates that the logo label text color. Only works for interstitial ad which adsID is 810002.
@property (nonatomic, strong) UIColor * _Nullable logoTextColor;
/// Indicates that the corner radius value of logo image. Only works for interstitial ad which adsID is 810002.
@property (nonatomic) CGFloat logoCornerRadius;
/// Optional delegate object that receives state change notifications from this RYInterstitialView. Typically this is a UIViewController.
@property (nonatomic, weak) id <RYInterstitialViewDelegate> _Nullable delegate;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Loads request for interstitials.
- (void)loadRequest;
@end



@class UIImage;

@interface RYInterstitialView (SWIFT_EXTENSION(MDAd))
/// Configs interstitial ad resources.
/// Only works for interstitial ad which adsID is 810002.
/// \param logoImage The app icon. The ratio of logoImage size is 1:1. We strongly recommand fill it with app icons.
///
/// \param name The app display name description. Default is “MDAd”.
///
- (void)configWithAppLogo:(UIImage * _Nullable)logoImage appName:(NSString * _Nullable)name;
@end


/// Delegate methods for receiving RYInterstitialView state change messages such as ad request status and ad click lifecycle.
SWIFT_PROTOCOL("_TtP4MDAd26RYInterstitialViewDelegate_")
@protocol RYInterstitialViewDelegate <NSObject>
@optional
/// Called when an interstitial ad request succeeded.
/// \param interstitial The current instance of RYInterstitialView class.
///
- (void)interstitialDidReceiveAd:(RYInterstitialView * _Nonnull)interstitial;
/// Called when an interstitial ad request completed without an interstitial to show.
/// \param interstitial The current instance of RYInterstitialView class.
///
/// \param error An instance of RYError class. You can print <code>error.errorDescription</code> to check error details.
///
- (void)interstitialDidFailToReceiveAd:(RYInterstitialView * _Nonnull)interstitial error:(RYError * _Nonnull)error;
/// Tells the delegate that the user click will open another app, backgrounding the current application.
/// \param interstitial The current instance of RYInterstitialView class.
///
- (void)interstitialWillLeaveApplication:(RYInterstitialView * _Nonnull)interstitial;
/// Tell the delegate that the user did clicked the countdown button.
- (void)interstitialCountDownDidTap;
@end

@protocol RYRewardVideoViewControllerDelegate;

/// A view controller to show reward videos.
SWIFT_CLASS("_TtC4MDAd27RYRewardVideoViewController")
@interface RYRewardVideoViewController : UIViewController
/// Optional delegate object that receives state change notifications from this RYRewardVideoViewController. Typically this is a UIViewController.
@property (nonatomic, weak) id <RYRewardVideoViewControllerDelegate> _Nullable delegate;
/// Indicates that reward video ads id.
@property (nonatomic, copy) NSString * _Nullable adsID;
/// A Boolean value that determines whether the default background imageview is display. There will display a background image after award video
/// finishes play if you set the property to true. Default is false.
@property (nonatomic) BOOL needDisplayBackgroundImageView;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewDidLayoutSubviews;
@end






@interface RYRewardVideoViewController (SWIFT_EXTENSION(MDAd))
/// Requests a reward video ad.
- (void)loadRequest;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
@end




/// Delegate methods for receiving reward video state change messages such as ad request status and ad click lifecycle.
SWIFT_PROTOCOL("_TtP4MDAd35RYRewardVideoViewControllerDelegate_")
@protocol RYRewardVideoViewControllerDelegate <NSObject>
@optional
/// Tells the delegate that the reward video ad request successfully received an ad.
/// \param controller An instance of RYRewardVideoViewController class for the current request.
///
- (void)rewardVideoDidReceiveAd:(RYRewardVideoViewController * _Nonnull)controller;
/// Tells the delegate that the reward video ad request failed.
/// \param controller An instance of RYRewardVideoViewController class for the current request.
///
/// \param error An instance of RYError class. You can print <code>error.errorDescription</code> to check error details.
///
- (void)rewardVideoDidFailToReceiveAd:(RYRewardVideoViewController * _Nonnull)controller error:(RYError * _Nonnull)error;
/// Tells the delegate that the user did clicked the close button.
- (void)RewardVideoWillClose;
@end





#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.1.2 (swiftlang-1100.0.278 clang-1100.0.33.9)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import StoreKit;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MDAd",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif



@class UIViewController;
@class NSCoder;

/// Super view for ads’s views. Remember that never use this view to show and load ads.
SWIFT_CLASS("_TtC4MDAd12RYAdBaseView")
@interface RYAdBaseView : UIView
/// Required reference to a root view controller that is used by the ads view to present content after the
/// user interacts with the ad. The root view controller is most commonly the view controller displaying the ad view.
@property (nonatomic, weak) UIViewController * _Nullable rootViewController;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// A class inherited from NSObject and manages the global settings such as log print.
SWIFT_CLASS("_TtC4MDAd13RYAdMobCenter")
@interface RYAdMobCenter : NSObject
/// Singleton.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RYAdMobCenter * _Nonnull center;)
+ (RYAdMobCenter * _Nonnull)center SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Setups sdk with app key and app secret.
/// \param appKey A string used to identify original app.
///
/// \param appSecretString A string used to identify original app.
///
- (void)setup:(NSString * _Nonnull)appKey appSecret:(NSString * _Nonnull)appSecretString;
/// Enables logs print under <code>Debug</code> mode. Default is false.
/// \param isEnabled A boolean indicates that whether the function of debug print is enabled. True is enabled. otherwise, debug print is disenabled.
///
- (void)enableDebugPrint:(BOOL)isEnabled;
@end

@class SKStoreProductViewController;

@interface RYAdMobCenter (SWIFT_EXTENSION(MDAd)) <SKStoreProductViewControllerDelegate>
- (void)productViewControllerDidFinish:(SKStoreProductViewController * _Nonnull)viewController;
@end

@protocol RYBannerViewDelegate;

/// The view that displays banner ads.
SWIFT_CLASS("_TtC4MDAd12RYBannerView")
@interface RYBannerView : RYAdBaseView
/// Indicates that banner ads id.
@property (nonatomic, copy) NSString * _Nullable adsID;
/// A Boolean value that determines whether the default close button is display. Close button is placed in the upper right corner of superView. Default is true.
@property (nonatomic) BOOL isShowCloseButton;
/// A Boolean value that determines whether the default download button is display. Default is true.
@property (nonatomic) BOOL isShowDownloadButton;
/// Optional delegate object that receives state change notifications from this RYBannerView. Typically this is a UIViewController.
@property (nonatomic, weak) id <RYBannerViewDelegate> _Nullable delegate;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Requests a banner ad.
- (void)loadRequest;
@end



@class RYError;

/// Delegate methods for receiving RYBannerView state change messages such as ad request status and ad click lifecycle.
SWIFT_PROTOCOL("_TtP4MDAd20RYBannerViewDelegate_")
@protocol RYBannerViewDelegate <NSObject>
@optional
/// Tells the delegate that an banner ad request successfully received an ad.
/// \param bannerView The current instance of RYBannerView class.
///
- (void)bannerDidReceiveAd:(RYBannerView * _Nonnull)bannerView;
/// Tells the delegate that an banner ad request failed.
/// \param bannerView The current instance of RYBannerView class.
///
/// \param error An instance of RYError class. You can print <code>error.errorDescription</code> to check error details.
///
- (void)bannerDidFailToReceiveAd:(RYBannerView * _Nonnull)bannerView error:(RYError * _Nonnull)error;
/// Tells the delegate that the user click will open another app, backgrounding the current application.
/// \param bannerView The current instance of RYBannerView class.
///
- (void)bannerWillLeaveApplication:(RYBannerView * _Nonnull)bannerView;
/// Tells the delegate that the user did clicked the close button.
- (void)bannerViewDidClose;
@end

@protocol RYBuoyViewDelegate;

/// The view that displays buoy ads.
SWIFT_CLASS("_TtC4MDAd10RYBuoyView")
@interface RYBuoyView : RYAdBaseView
/// Indicates that buoy ads id.
@property (nonatomic, copy) NSString * _Nullable adsID;
/// A Boolean value that determines whether the default close button is display. Close button is placed in the upper right corner of superView. Default is true.
@property (nonatomic) BOOL isShowCloseButton;
/// Optional delegate object that receives state change notifications from this RYBuoyView. Typically this is a UIViewController.
@property (nonatomic, weak) id <RYBuoyViewDelegate> _Nullable delegate;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Requests a buoy ad.
- (void)loadRequest;
@end




/// Delegate methods for receiving RYBuoyView state change messages such as ad request status and ad click lifecycle.
SWIFT_PROTOCOL("_TtP4MDAd18RYBuoyViewDelegate_")
@protocol RYBuoyViewDelegate <NSObject>
@optional
/// Tells the delegate that an ad request successfully received an ad.
/// \param buoyView The current instance of RYBuoyView class.
///
- (void)buoyDidReceiveAd:(RYBuoyView * _Nonnull)buoyView;
/// Tells the delegate that an ad request failed.
/// \param buoyView The current instance of RYBuoyView class.
///
/// \param error An instance of RYError class. You can print <code>error.errorDescription</code> to check error details.
///
- (void)buoyDidFailToReceiveAd:(RYBuoyView * _Nonnull)buoyView error:(RYError * _Nonnull)error;
/// Tells the delegate that the user click will open another app, backgrounding the current application.
/// \param buoyView The current instance of RYBuoyView class.
///
- (void)buoyWillLeaveApplication:(RYBuoyView * _Nonnull)buoyView;
/// Tell the delegate that the user did clicked the close button.
- (void)buoyViewDidClose;
@end

@protocol RYCustomAdDelegate;

SWIFT_CLASS("_TtC4MDAd10RYCustomAd")
@interface RYCustomAd : NSObject
/// Indicates that ad id needed to be customize. Such as <code>820001</code> for banner ad, <code>850001</code> for info flow ad.
@property (nonatomic, copy) NSString * _Nonnull adsID;
@property (nonatomic, weak) id <RYCustomAdDelegate> _Nullable delegate;
/// Required reference to a root view controller that is used by the ads view to present content after the
/// user interacts with the ad. The root view controller is most commonly the view controller displaying the custom ad view.
@property (nonatomic, weak) UIViewController * _Nullable rootViewController;
- (nonnull instancetype)initWithAdsID:(NSString * _Nonnull)adsID OBJC_DESIGNATED_INITIALIZER;
/// Call this method when the user clicks the ad.
- (void)recordClick;
/// Call this method when the ad is visible to the user.
- (void)recordImpression;
/// Call this method when open the ad’s link.
/// You can add this method to your Selector for gestures or actions that added for custom ad view or its subviews.
- (void)openAdLink;
/// Requests a custom ad. Remembers must set <code>adsID</code> before call this function.
- (void)loadRequest;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Delegate methods for receiving custom ads state change messages such as ad request status.
SWIFT_PROTOCOL("_TtP4MDAd18RYCustomAdDelegate_")
@protocol RYCustomAdDelegate <NSObject>
/// Tells the delegate that an custom ad request successfully.
/// \param customAd An instance of RYCustomAd class.
///
/// \param infos An dictionary and you can custom your specify ad view with it. The infos contains keys are:
/// <ul>
///   <li>
///     “MDAdKeyForImageUrl”: Ad’s image url string. Use this key to retreive image url string. Usage is <code>info[MDAdKeyForImageUrl]</code>.
///   </li>
///   <li>
///     “MDAdKeyForLinkUrl”: Ad’s link url string. Use this key to retreive link url string. Usage is <code>info[MDAdKeyForLinkUrl]</code>.
///   </li>
///   <li>
///     “MDAdKeyForTitle”: Ad’s title. Use this key to retreive title string. Usage is <code>info[MDAdKeyForTitle]</code>.
///   </li>
///   <li>
///     “MDAdKeyForDescription”: Ad’s description text. Use this key to retreive description string. Usage is <code>info[MDAdKeyForDescription]</code>.
///   </li>
/// </ul>
///
- (void)customAdDidReceiveAd:(RYCustomAd * _Nonnull)customAd receivedData:(NSDictionary<NSString *, NSString *> * _Nonnull)infos;
@optional
/// Tells the delegate that an custom ad request failed.
/// \param customAd An instance of RYCustomAd class.
///
/// \param error An instance of RYError class. You can print <code>error.errorDescription</code> to check error details.
///
- (void)customAdDidFailToReceiveAd:(RYCustomAd * _Nonnull)customAd error:(RYError * _Nonnull)error;
@end


SWIFT_CLASS("_TtC4MDAd7RYError")
@interface RYError : NSObject
@property (nonatomic, copy) NSString * _Nullable errorDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol RYInfoFlowViewDelegate;

/// An ad type displayed in the flow of information.
SWIFT_CLASS("_TtC4MDAd14RYInfoFlowView")
@interface RYInfoFlowView : RYAdBaseView
/// Indicates that information flow ads id.
@property (nonatomic, copy) NSString * _Nullable adsID;
/// Optional delegate object that receives state change notifications from this RYInfoFlowView. Typically this is a UIViewController.
@property (nonatomic, weak) id <RYInfoFlowViewDelegate> _Nullable delegate;
/// A Boolean value that determines whether the default close button is display. Close button is placed in the upper right corner of superView. Default is true.
@property (nonatomic) BOOL isShowCloseButton;
/// A Boolean value that determines whether the default download button is display. Default is true.
@property (nonatomic) BOOL isShowDownloadButton;
/// A Boolean value that determines whether the description label is display. Default is false.
/// Remembers that the property works only in the case that the adsID’s value is 850006.
@property (nonatomic) BOOL isShowDescriptionText;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Request an information flow ad.
- (void)loadRequest;
@end




/// Delegate methods for receiving RYInfoFlowView state change messages such as ad request status and ad click lifecycle.
SWIFT_PROTOCOL("_TtP4MDAd22RYInfoFlowViewDelegate_")
@protocol RYInfoFlowViewDelegate <NSObject>
@optional
/// Tells the delegate that an ad request successfully received an ad.
/// \param infoFlowView The current instance of RYInfoFlowView class.
///
- (void)infoFlowDidReceiveAd:(RYInfoFlowView * _Nonnull)infoFlowView;
/// Tells the delegate that an ad request failed.
/// \param infoFlowView The current instance of RYInfoFlowView class.
///
/// \param error An instance of RYError class. You can print <code>error.errorDescription</code> to check error details.
///
- (void)infoFlowDidFailToReceiveAd:(RYInfoFlowView * _Nonnull)infoFlowView error:(RYError * _Nonnull)error;
/// Tells the delegate that the user click will open another app, backgrounding the current application.
/// \param infoFlowView The current instance of RYInfoFlowView class.
///
- (void)infoFlowWillLeaveApplication:(RYInfoFlowView * _Nonnull)infoFlowView;
/// Tells the delegate that the user did clicked the close button.
- (void)infoFlowViewDidClose;
@end

@protocol RYInterstitialHalfViewDelegate;

/// An half interstitial ad.
SWIFT_CLASS("_TtC4MDAd22RYInterstitialHalfView")
@interface RYInterstitialHalfView : RYAdBaseView
/// Indicates that ads id.
@property (nonatomic, copy) NSString * _Nullable adsID;
/// A Boolean value that determines whether the default close button is display. Close button is placed in the upper right corner of superView. Default is true.
@property (nonatomic) BOOL isShowCloseButton;
/// Optional delegate object that receives state change notifications from this RYInterstitialHalfView. Typically this is a UIViewController.
@property (nonatomic, weak) id <RYInterstitialHalfViewDelegate> _Nullable delegate;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Loads request for interstitials.
- (void)loadRequest;
@end




/// Delegate methods for receiving RYInterstitialHalfView state change messages such as ad request status and ad click lifecycle.
SWIFT_PROTOCOL("_TtP4MDAd30RYInterstitialHalfViewDelegate_")
@protocol RYInterstitialHalfViewDelegate <NSObject>
@optional
/// Called when an half interstitial ad request succeeded.
/// \param interstitial The current instance of RYInterstitialHalfView class.
///
- (void)interstitialHalfDidReceiveAd:(RYInterstitialHalfView * _Nonnull)interstitial;
/// Called when an half interstitial ad request completed without an half interstitial to show.
/// \param interstitial The current instance of RYInterstitialHalfView class.
///
/// \param error An instance of RYError class. You can print <code>error.errorDescription</code> to check error details.
///
- (void)interstitialHalfDidFailToReceiveAd:(RYInterstitialHalfView * _Nonnull)interstitial error:(RYError * _Nonnull)error;
/// Tells the delegate that the user click will open another app, backgrounding the current application.
/// \param interstitial The current instance of RYInterstitialHalfView class.
///
- (void)interstitialHalfWillLeaveApplication:(RYInterstitialHalfView * _Nonnull)interstitial;
/// Tell the delegate that the user did clicked the close button.
- (void)interstitialHalfViewDidClose;
@end

@class UIFont;
@class UIColor;
@protocol RYInterstitialViewDelegate;

/// An interstitial ad. This is a full-screen advertisement shown at
/// natural transition points in your application such as between games.
SWIFT_CLASS("_TtC4MDAd18RYInterstitialView")
@interface RYInterstitialView : RYAdBaseView
/// A Boolean value that determines whether count down can cancel when show ads. Default is false.
@property (nonatomic) BOOL needPauseCountDownWhenShowAds;
/// Indicates that ads id.
@property (nonatomic, copy) NSString * _Nullable adsID;
/// Indicates that the logo label font. Only works for interstitial ad which adsID is 810002.
@property (nonatomic, strong) UIFont * _Nullable logoTextFont;
/// Indicates that the logo label text color. Only works for interstitial ad which adsID is 810002.
@property (nonatomic, strong) UIColor * _Nullable logoTextColor;
/// Indicates that the corner radius value of logo image. Only works for interstitial ad which adsID is 810002.
@property (nonatomic) CGFloat logoCornerRadius;
/// Optional delegate object that receives state change notifications from this RYInterstitialView. Typically this is a UIViewController.
@property (nonatomic, weak) id <RYInterstitialViewDelegate> _Nullable delegate;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Loads request for interstitials.
- (void)loadRequest;
@end



@class UIImage;

@interface RYInterstitialView (SWIFT_EXTENSION(MDAd))
/// Configs interstitial ad resources.
/// Only works for interstitial ad which adsID is 810002.
/// \param logoImage The app icon. The ratio of logoImage size is 1:1. We strongly recommand fill it with app icons.
///
/// \param name The app display name description. Default is “MDAd”.
///
- (void)configWithAppLogo:(UIImage * _Nullable)logoImage appName:(NSString * _Nullable)name;
@end


/// Delegate methods for receiving RYInterstitialView state change messages such as ad request status and ad click lifecycle.
SWIFT_PROTOCOL("_TtP4MDAd26RYInterstitialViewDelegate_")
@protocol RYInterstitialViewDelegate <NSObject>
@optional
/// Called when an interstitial ad request succeeded.
/// \param interstitial The current instance of RYInterstitialView class.
///
- (void)interstitialDidReceiveAd:(RYInterstitialView * _Nonnull)interstitial;
/// Called when an interstitial ad request completed without an interstitial to show.
/// \param interstitial The current instance of RYInterstitialView class.
///
/// \param error An instance of RYError class. You can print <code>error.errorDescription</code> to check error details.
///
- (void)interstitialDidFailToReceiveAd:(RYInterstitialView * _Nonnull)interstitial error:(RYError * _Nonnull)error;
/// Tells the delegate that the user click will open another app, backgrounding the current application.
/// \param interstitial The current instance of RYInterstitialView class.
///
- (void)interstitialWillLeaveApplication:(RYInterstitialView * _Nonnull)interstitial;
/// Tell the delegate that the user did clicked the countdown button.
- (void)interstitialCountDownDidTap;
@end

@protocol RYRewardVideoViewControllerDelegate;

/// A view controller to show reward videos.
SWIFT_CLASS("_TtC4MDAd27RYRewardVideoViewController")
@interface RYRewardVideoViewController : UIViewController
/// Optional delegate object that receives state change notifications from this RYRewardVideoViewController. Typically this is a UIViewController.
@property (nonatomic, weak) id <RYRewardVideoViewControllerDelegate> _Nullable delegate;
/// Indicates that reward video ads id.
@property (nonatomic, copy) NSString * _Nullable adsID;
/// A Boolean value that determines whether the default background imageview is display. There will display a background image after award video
/// finishes play if you set the property to true. Default is false.
@property (nonatomic) BOOL needDisplayBackgroundImageView;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewDidLayoutSubviews;
@end






@interface RYRewardVideoViewController (SWIFT_EXTENSION(MDAd))
/// Requests a reward video ad.
- (void)loadRequest;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
@end




/// Delegate methods for receiving reward video state change messages such as ad request status and ad click lifecycle.
SWIFT_PROTOCOL("_TtP4MDAd35RYRewardVideoViewControllerDelegate_")
@protocol RYRewardVideoViewControllerDelegate <NSObject>
@optional
/// Tells the delegate that the reward video ad request successfully received an ad.
/// \param controller An instance of RYRewardVideoViewController class for the current request.
///
- (void)rewardVideoDidReceiveAd:(RYRewardVideoViewController * _Nonnull)controller;
/// Tells the delegate that the reward video ad request failed.
/// \param controller An instance of RYRewardVideoViewController class for the current request.
///
/// \param error An instance of RYError class. You can print <code>error.errorDescription</code> to check error details.
///
- (void)rewardVideoDidFailToReceiveAd:(RYRewardVideoViewController * _Nonnull)controller error:(RYError * _Nonnull)error;
/// Tells the delegate that the user did clicked the close button.
- (void)RewardVideoWillClose;
@end





#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif
